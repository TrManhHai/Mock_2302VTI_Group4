{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Lesson_Resource_Registration_Login_CRUD Demo\\\\Demo\\\\15. Delete Group\\\\Demo\\\\Frontend\\\\GroupManagementFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Lesson_Resource_Registration_Login_CRUD Demo\\\\Demo\\\\15. Delete Group\\\\Demo\\\\Frontend\\\\GroupManagementFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Lesson_Resource_Registration_Login_CRUD Demo\\\\Demo\\\\15. Delete Group\\\\Demo\\\\Frontend\\\\GroupManagementFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Lesson_Resource_Registration_Login_CRUD Demo\\\\Demo\\\\15. Delete Group\\\\Demo\\\\Frontend\\\\GroupManagementFrontEnd\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Lesson_Resource_Registration_Login_CRUD Demo\\\\Demo\\\\15. Delete Group\\\\Demo\\\\Frontend\\\\GroupManagementFrontEnd\\\\src\\\\pages\\\\group\\\\Group.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Card, CardBody, Col, Container, Row, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport { getListGroupAction, updateSelectedRowsAction } from '../../redux/actions/groupActions';\nimport { connect } from \"react-redux\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport { selectListGroup, selectPage, selectSelectedRows, selectSize, selectSortField, selectSortType, selectTotalElement } from '../../redux/selectors/groupSelector';\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\nimport filterFactory, { customFilter } from 'react-bootstrap-table2-filter';\nimport CustomSearch from './CustomSearch';\nimport * as Icon from \"react-feather\";\nimport Filter from \"./CustomFilter\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\nimport GroupApi from '../../api/GroupApi';\nimport { Formik, FastField, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { toastr } from \"react-redux-toastr\";\nimport { Edit2 } from \"react-feather\";\n\nvar Group = function Group(props) {\n  var getListGroups = props.getListGroupAction;\n  var size = props.size; // filter\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVisibleFilter = _useState2[0],\n      setVisibleFilter = _useState2[1];\n\n  var onTotalMemberFilter;\n  useEffect(function () {\n    getListGroups(1, size);\n  }, [getListGroups, size]);\n\n  var actionFormatter = function actionFormatter(cell, row, rowIndex) {\n    return /*#__PURE__*/React.createElement(Edit2, {\n      className: \"align-middle mr-1\",\n      size: 18,\n      onClick: function onClick() {\n        return updateGroup(row.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    });\n  };\n\n  var tableColumns = [{\n    dataField: \"name\",\n    text: \"Name\",\n    sort: true\n  }, {\n    dataField: \"totalMember\",\n    text: \"Total Member\",\n    sort: true,\n    filter: customFilter(),\n    filterRenderer: function filterRenderer(onFilter, column) {\n      onTotalMemberFilter = onFilter;\n      return null;\n    }\n  }, {\n    dataField: \"actions\",\n    text: \"\",\n    align: function align() {\n      return 'center';\n    },\n    headerStyle: function headerStyle() {\n      return {\n        width: '80px'\n      };\n    },\n    formatter: actionFormatter\n  }];\n\n  var handleTableChange = function handleTableChange(type, _ref) {\n    var page = _ref.page,\n        sizePerPage = _ref.sizePerPage,\n        sortField = _ref.sortField,\n        sortOrder = _ref.sortOrder,\n        searchText = _ref.searchText,\n        filters = _ref.filters;\n    var filter = filters && filters.totalMember && filters.totalMember.filterVal ? filters.totalMember.filterVal : null;\n    var minTotalMember = filter && filter.minTotalMember ? filter.minTotalMember : null;\n    var maxTotalMember = filter && filter.maxTotalMember ? filter.maxTotalMember : null;\n    getListGroups(page, sizePerPage, sortField, sortOrder, searchText, minTotalMember, maxTotalMember);\n  };\n\n  var onFilterChange = function onFilterChange(minTotalMember, maxTotalMember) {\n    onTotalMemberFilter({\n      minTotalMember: minTotalMember,\n      maxTotalMember: maxTotalMember\n    });\n  };\n\n  var refreshForm = function refreshForm() {\n    handleTableChange(null, {\n      page: 1,\n      sizePerPage: size,\n      sortField: null,\n      sortOrder: null,\n      searchText: \"\",\n      filters: {\n        totalMember: null\n      }\n    }); // refresh selected rows\n\n    props.updateSelectedRowsAction([]);\n  }; // create\n\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isOpenModalCreate = _useState4[0],\n      setOpenModalCreate = _useState4[1];\n\n  var showSuccessNotification = function showSuccessNotification(title, message) {\n    var options = {\n      timeOut: 2500,\n      showCloseButton: false,\n      progressBar: false,\n      position: \"top-right\"\n    }; // show notification\n\n    toastr.success(title, message, options);\n  };\n\n  var showWrongNotification = function showWrongNotification(title, message) {\n    var options = {\n      timeOut: 2500,\n      showCloseButton: false,\n      progressBar: false,\n      position: \"top-right\"\n    }; // show notification\n\n    toastr.error(title, message, options);\n  };\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isOpenModalUpdate = _useState6[0],\n      setOpenModalUpdate = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      updateGroupInfo = _useState8[0],\n      setUpdateGroupInfo = _useState8[1]; // update\n\n\n  var updateGroup = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(groupId) {\n      var groupInfo;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return GroupApi.getByID(groupId);\n\n            case 2:\n              groupInfo = _context.sent;\n              setUpdateGroupInfo(groupInfo);\n              setOpenModalUpdate(true);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function updateGroup(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // delete \n\n\n  var deleteGroups = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(props.selectedRows === null || props.selectedRows === undefined || props.selectedRows.length === 0)) {\n                _context2.next = 4;\n                break;\n              }\n\n              showWrongNotification(\"Delete Group\", \"You have not selected group!\");\n              _context2.next = 8;\n              break;\n\n            case 4:\n              _context2.next = 6;\n              return GroupApi.deleteByIds(props.selectedRows);\n\n            case 6:\n              // show notification\n              showSuccessNotification(\"Delete Group\", \"Delete Group Successfully!\"); // reload group page\n\n              refreshForm();\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function deleteGroups() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleOnSelect = function handleOnSelect(row, isSelect) {\n    var selected = props.selectedRows;\n\n    if (isSelect) {\n      selected = [].concat(_toConsumableArray(selected), [row.id]);\n    } else {\n      selected = selected.filter(function (x) {\n        return x !== row.id;\n      });\n    }\n\n    props.updateSelectedRowsAction(selected);\n  };\n\n  var handleOnSelectAll = function handleOnSelectAll(isSelect, rows) {\n    var ids = rows.map(function (r) {\n      return r.id;\n    });\n    var selected = [];\n\n    if (isSelect) {\n      selected = ids;\n    }\n\n    props.updateSelectedRowsAction(selected);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    className: \"p-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"h3 mb-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, \"Group Management\"), /*#__PURE__*/React.createElement(Card, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ToolkitProvider, {\n    keyField: \"id\",\n    data: props.groups,\n    columns: tableColumns,\n    search: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, function (toolkitprops) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }, isVisibleFilter && /*#__PURE__*/React.createElement(Filter, {\n      onFilterChange: onFilterChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 43\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        alignItems: \"flex-end\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"9\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CustomSearch, Object.assign({}, toolkitprops.searchProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 23\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      xs: \"3\",\n      style: {\n        paddingBottom: 20\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"float-right pull-right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Icon.Filter, {\n      size: \"24\",\n      className: \"align-middle mr-2\",\n      onClick: function onClick() {\n        return setVisibleFilter(!isVisibleFilter);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Icon.RefreshCcw, {\n      size: \"24\",\n      className: \"align-middle mr-2\",\n      onClick: function onClick() {\n        return refreshForm();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Icon.PlusCircle, {\n      size: \"24\",\n      className: \"align-middle mr-2\",\n      onClick: function onClick() {\n        return setOpenModalCreate(true);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Icon.Trash2, {\n      size: \"24\",\n      className: \"align-middle mr-2\",\n      onClick: deleteGroups,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 25\n      }\n    })))), /*#__PURE__*/React.createElement(BootstrapTable, Object.assign({}, toolkitprops.baseProps, {\n      bootstrap4: true,\n      striped: true,\n      hover: true,\n      bordered: true,\n      remote: true,\n      sort: {\n        dataField: props.sortField,\n        order: props.sortType\n      },\n      pagination: paginationFactory({\n        page: props.page,\n        totalSize: props.totalElement,\n        sizePerPage: props.size,\n        nextPageText: '>',\n        prePageText: '<',\n        withFirstAndLast: false,\n        alwaysShowAllBtns: true,\n        hideSizePerPage: true\n      }),\n      filter: filterFactory(),\n      selectRow: {\n        mode: 'checkbox',\n        clickToSelect: true,\n        selected: props.selectedRows,\n        onSelect: handleOnSelect,\n        onSelectAll: handleOnSelectAll\n      },\n      onTableChange: handleTableChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 19\n      }\n    }))));\n  })), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpenModalCreate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      name: ''\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().required('Required').max(50, 'Must be between 6 to 50 characters').min(6, 'Must be between 6 to 50 characters').test('checkUniqueName', 'This name is already exists.', /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(name) {\n          var isExists;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return GroupApi.existsByName(name);\n\n                case 2:\n                  isExists = _context3.sent;\n                  return _context3.abrupt(\"return\", !isExists);\n\n                case 4:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x2) {\n          return _ref4.apply(this, arguments);\n        };\n      }())\n    }),\n    onSubmit: /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(values) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return GroupApi.create(values.name);\n\n              case 3:\n                setOpenModalCreate(false); // show notification\n\n                showSuccessNotification(\"Create Group\", \"Create Group Successfully!\"); // reload group page\n\n                refreshForm();\n                _context4.next = 12;\n                break;\n\n              case 8:\n                _context4.prev = 8;\n                _context4.t0 = _context4[\"catch\"](0);\n                console.log(_context4.t0);\n                setOpenModalCreate(false);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[0, 8]]);\n      }));\n\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }(),\n    validateOnChange: false,\n    validateOnBlur: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }\n  }, function (_ref6) {\n    var isSubmitting = _ref6.isSubmitting;\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 15\n      }\n    }, \"Create Group\"), /*#__PURE__*/React.createElement(ModalBody, {\n      className: \"m-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        alignItems: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 19\n      }\n    }, \"Group Name:\"), /*#__PURE__*/React.createElement(Col, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FastField, {\n      bsSize: \"lg\",\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Enter Group Name\",\n      component: ReactstrapInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      style: {\n        marginLeft: 10\n      },\n      disabled: isSubmitting,\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 17\n      }\n    }, \"Save\"), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: function onClick() {\n        return setOpenModalCreate(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 17\n      }\n    }, \"Cancel\")));\n  })), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpenModalUpdate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      name: updateGroupInfo ? updateGroupInfo.name : '',\n      totalMember: updateGroupInfo ? updateGroupInfo.totalMember : ''\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().required('Required').max(50, 'Must be between 6 to 50 characters').min(6, 'Must be between 6 to 50 characters').test('checkUniqueName', 'This name is already exists.', /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(name) {\n          var isExists;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (!(name === updateGroupInfo.name)) {\n                    _context5.next = 2;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\", true);\n\n                case 2:\n                  _context5.next = 4;\n                  return GroupApi.existsByName(name);\n\n                case 4:\n                  isExists = _context5.sent;\n                  return _context5.abrupt(\"return\", !isExists);\n\n                case 6:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x4) {\n          return _ref7.apply(this, arguments);\n        };\n      }()),\n      totalMember: Yup.number().min(0, \"Must be a positive integer\").integer(\"Must be a positive integer\")\n    }),\n    onSubmit: /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(values) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return GroupApi.update(updateGroupInfo.id, values.name, values.totalMember);\n\n              case 3:\n                setOpenModalUpdate(false); // show notification\n\n                showSuccessNotification(\"Update Group\", \"Update Group Successfully!\"); // reload group page\n\n                refreshForm();\n                _context6.next = 12;\n                break;\n\n              case 8:\n                _context6.prev = 8;\n                _context6.t0 = _context6[\"catch\"](0);\n                console.log(_context6.t0);\n                setOpenModalUpdate(false);\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[0, 8]]);\n      }));\n\n      return function (_x5) {\n        return _ref8.apply(this, arguments);\n      };\n    }(),\n    validateOnChange: false,\n    validateOnBlur: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }\n  }, function (_ref9) {\n    var isSubmitting = _ref9.isSubmitting;\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 15\n      }\n    }, \"Update Group\"), /*#__PURE__*/React.createElement(ModalBody, {\n      className: \"m-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        alignItems: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 19\n      }\n    }, \"Group Name:\"), /*#__PURE__*/React.createElement(Col, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FastField, {\n      bsSize: \"lg\",\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Enter Group Name\",\n      component: ReactstrapInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        alignItems: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 19\n      }\n    }, \"Total Member:\"), /*#__PURE__*/React.createElement(Col, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FastField, {\n      bsSize: \"lg\",\n      type: \"number\",\n      name: \"totalMember\",\n      placeholder: \"Enter Total Member\",\n      component: ReactstrapInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      style: {\n        marginLeft: 10\n      },\n      disabled: isSubmitting,\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }\n    }, \"Save\"), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: function onClick() {\n        return setOpenModalUpdate(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 17\n      }\n    }, \"Cancel\")));\n  })));\n};\n\nvar mapGlobalStateToProps = function mapGlobalStateToProps(state) {\n  return {\n    groups: selectListGroup(state),\n    page: selectPage(state),\n    size: selectSize(state),\n    totalElement: selectTotalElement(state),\n    sortField: selectSortField(state),\n    sortType: selectSortType(state),\n    selectedRows: selectSelectedRows(state)\n  };\n};\n\nexport default connect(mapGlobalStateToProps, {\n  getListGroupAction: getListGroupAction,\n  updateSelectedRowsAction: updateSelectedRowsAction\n})(Group);","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Lesson_Resource_Registration_Login_CRUD Demo/Demo/15. Delete Group/Demo/Frontend/GroupManagementFrontEnd/src/pages/group/Group.js"],"names":["React","useState","useEffect","Button","Card","CardBody","Col","Container","Row","Modal","ModalBody","ModalFooter","ModalHeader","getListGroupAction","updateSelectedRowsAction","connect","BootstrapTable","paginationFactory","selectListGroup","selectPage","selectSelectedRows","selectSize","selectSortField","selectSortType","selectTotalElement","ToolkitProvider","filterFactory","customFilter","CustomSearch","Icon","Filter","ReactstrapInput","GroupApi","Formik","FastField","Form","Yup","toastr","Edit2","Group","props","getListGroups","size","isVisibleFilter","setVisibleFilter","onTotalMemberFilter","actionFormatter","cell","row","rowIndex","updateGroup","id","tableColumns","dataField","text","sort","filter","filterRenderer","onFilter","column","align","headerStyle","width","formatter","handleTableChange","type","page","sizePerPage","sortField","sortOrder","searchText","filters","totalMember","filterVal","minTotalMember","maxTotalMember","onFilterChange","refreshForm","isOpenModalCreate","setOpenModalCreate","showSuccessNotification","title","message","options","timeOut","showCloseButton","progressBar","position","success","showWrongNotification","error","isOpenModalUpdate","setOpenModalUpdate","updateGroupInfo","setUpdateGroupInfo","groupId","getByID","groupInfo","deleteGroups","selectedRows","undefined","length","deleteByIds","handleOnSelect","isSelect","selected","x","handleOnSelectAll","rows","ids","map","r","groups","toolkitprops","alignItems","searchProps","paddingBottom","baseProps","order","sortType","totalSize","totalElement","nextPageText","prePageText","withFirstAndLast","alwaysShowAllBtns","hideSizePerPage","mode","clickToSelect","onSelect","onSelectAll","name","object","string","required","max","min","test","existsByName","isExists","values","create","console","log","isSubmitting","marginLeft","number","integer","update","mapGlobalStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader\r\n} from \"reactstrap\";\r\nimport { getListGroupAction, updateSelectedRowsAction } from '../../redux/actions/groupActions';\r\nimport { connect } from \"react-redux\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport { selectListGroup, selectPage, selectSelectedRows, selectSize, selectSortField, selectSortType, selectTotalElement } from '../../redux/selectors/groupSelector';\r\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\r\nimport filterFactory, { customFilter } from 'react-bootstrap-table2-filter';\r\nimport CustomSearch from './CustomSearch';\r\nimport * as Icon from \"react-feather\";\r\nimport Filter from \"./CustomFilter\";\r\nimport { ReactstrapInput } from \"reactstrap-formik\";\r\nimport GroupApi from '../../api/GroupApi';\r\nimport { Formik, FastField, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { toastr } from \"react-redux-toastr\";\r\nimport { Edit2 } from \"react-feather\";\r\n\r\nconst Group = (props) => {\r\n\r\n  const getListGroups = props.getListGroupAction;\r\n  const size = props.size;\r\n\r\n  // filter\r\n  const [isVisibleFilter, setVisibleFilter] = useState(false);\r\n  let onTotalMemberFilter;\r\n\r\n  useEffect(() => {\r\n    getListGroups(1, size);\r\n  }, [getListGroups, size]);\r\n\r\n  const actionFormatter = (cell, row, rowIndex) => {\r\n    return (\r\n      <Edit2 className=\"align-middle mr-1\" size={18} onClick={() => updateGroup(row.id)} />\r\n    );\r\n  };\r\n\r\n  const tableColumns = [\r\n    {\r\n      dataField: \"name\",\r\n      text: \"Name\",\r\n      sort: true\r\n    },\r\n    {\r\n      dataField: \"totalMember\",\r\n      text: \"Total Member\",\r\n      sort: true,\r\n      filter: customFilter(),\r\n      filterRenderer: (onFilter, column) => {\r\n        onTotalMemberFilter = onFilter;\r\n        return null;\r\n      }\r\n    },\r\n    {\r\n      dataField: \"actions\",\r\n      text: \"\",\r\n      align: () => {\r\n        return 'center';\r\n      },\r\n      headerStyle: () => {\r\n        return { width: '80px' };\r\n      },\r\n      formatter: actionFormatter\r\n    }\r\n  ];\r\n\r\n  const handleTableChange = (type, { page, sizePerPage, sortField, sortOrder, searchText, filters }) => {\r\n    const filter = filters && filters.totalMember && filters.totalMember.filterVal ? filters.totalMember.filterVal : null;\r\n    const minTotalMember = filter && filter.minTotalMember ? filter.minTotalMember : null;\r\n    const maxTotalMember = filter && filter.maxTotalMember ? filter.maxTotalMember : null;\r\n    getListGroups(page, sizePerPage, sortField, sortOrder, searchText, minTotalMember, maxTotalMember);\r\n  }\r\n\r\n  const onFilterChange = (minTotalMember, maxTotalMember) => {\r\n    onTotalMemberFilter({\r\n      minTotalMember,\r\n      maxTotalMember\r\n    });\r\n  }\r\n\r\n  const refreshForm = () => {\r\n    handleTableChange(\r\n      null,\r\n      {\r\n        page: 1,\r\n        sizePerPage: size,\r\n        sortField: null,\r\n        sortOrder: null,\r\n        searchText: \"\",\r\n        filters: {\r\n          totalMember: null\r\n        }\r\n      }\r\n    );\r\n    // refresh selected rows\r\n    props.updateSelectedRowsAction([]);\r\n  }\r\n\r\n  // create\r\n  const [isOpenModalCreate, setOpenModalCreate] = useState(false);\r\n\r\n  const showSuccessNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 2500,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.success(title, message, options);\r\n  }\r\n\r\n  const showWrongNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 2500,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.error(title, message, options);\r\n  }\r\n\r\n  const [isOpenModalUpdate, setOpenModalUpdate] = useState(false);\r\n  const [updateGroupInfo, setUpdateGroupInfo] = useState();\r\n\r\n  // update\r\n  const updateGroup = async (groupId) => {\r\n    const groupInfo = await GroupApi.getByID(groupId);\r\n    setUpdateGroupInfo(groupInfo);\r\n    setOpenModalUpdate(true);\r\n  }\r\n\r\n  // delete \r\n  const deleteGroups = async () => {\r\n    if (props.selectedRows === null || props.selectedRows === undefined || props.selectedRows.length === 0) {\r\n      showWrongNotification(\r\n        \"Delete Group\",\r\n        \"You have not selected group!\"\r\n      );\r\n    } else {\r\n      await GroupApi.deleteByIds(props.selectedRows);\r\n      // show notification\r\n      showSuccessNotification(\r\n        \"Delete Group\",\r\n        \"Delete Group Successfully!\");\r\n      // reload group page\r\n      refreshForm();\r\n    }\r\n  }\r\n\r\n  const handleOnSelect = (row, isSelect) => {\r\n    let selected = props.selectedRows;\r\n    if (isSelect) {\r\n      selected = [...selected, row.id]\r\n    } else {\r\n      selected = selected.filter(x => x !== row.id)\r\n    }\r\n    props.updateSelectedRowsAction(selected);\r\n  }\r\n\r\n  const handleOnSelectAll = (isSelect, rows) => {\r\n    const ids = rows.map(r => r.id);\r\n    let selected = [];\r\n\r\n    if (isSelect) {\r\n      selected = ids;\r\n    }\r\n\r\n    props.updateSelectedRowsAction(selected);\r\n  }\r\n\r\n  return (\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">Group Management</h1>\r\n      <Card>\r\n        <ToolkitProvider\r\n          keyField=\"id\"\r\n          data={props.groups}\r\n          columns={tableColumns}\r\n          search\r\n        >\r\n          {\r\n            toolkitprops => (\r\n              <div>\r\n                <CardBody>\r\n                  <Row>\r\n                    <Col>\r\n                      {isVisibleFilter && <Filter onFilterChange={onFilterChange} />}\r\n                    </Col>\r\n                  </Row>\r\n                  <Row style={{ alignItems: \"flex-end\" }}>\r\n                    <Col xs=\"9\">\r\n                      <CustomSearch {...toolkitprops.searchProps} />\r\n                    </Col>\r\n                    <Col xs=\"3\" style={{ paddingBottom: 20 }}>\r\n                      <div className=\"float-right pull-right\">\r\n                        {/* filter button */}\r\n                        <Icon.Filter size=\"24\" className=\"align-middle mr-2\" onClick={() => setVisibleFilter(!isVisibleFilter)} />\r\n                        <Icon.RefreshCcw size=\"24\" className=\"align-middle mr-2\" onClick={() => refreshForm()} />\r\n                        <Icon.PlusCircle size=\"24\" className=\"align-middle mr-2\" onClick={() => setOpenModalCreate(true)} />\r\n                        <Icon.Trash2 size=\"24\" className=\"align-middle mr-2\" onClick={deleteGroups} />\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                  <BootstrapTable\r\n                    {...toolkitprops.baseProps}\r\n                    bootstrap4\r\n                    striped\r\n                    hover\r\n                    bordered\r\n                    remote\r\n                    sort={{\r\n                      dataField: props.sortField,\r\n                      order: props.sortType\r\n                    }}\r\n                    pagination={paginationFactory({\r\n                      page: props.page,\r\n                      totalSize: props.totalElement,\r\n                      sizePerPage: props.size,\r\n\r\n                      nextPageText: '>',\r\n                      prePageText: '<',\r\n                      withFirstAndLast: false,\r\n                      alwaysShowAllBtns: true,\r\n\r\n                      hideSizePerPage: true,\r\n\r\n                    })}\r\n                    filter={filterFactory()}\r\n                    selectRow={{\r\n                      mode: 'checkbox',\r\n                      clickToSelect: true,\r\n                      selected: props.selectedRows,\r\n                      onSelect: handleOnSelect,\r\n                      onSelectAll: handleOnSelectAll\r\n                    }}\r\n                    onTableChange={handleTableChange}\r\n                  />\r\n                </CardBody>\r\n              </div>\r\n            )\r\n          }\r\n        </ToolkitProvider>\r\n\r\n      </Card>\r\n\r\n      {/* model create */}\r\n      <Modal\r\n        isOpen={isOpenModalCreate}\r\n      >\r\n        <Formik\r\n          initialValues={\r\n            {\r\n              name: ''\r\n            }\r\n          }\r\n          validationSchema={\r\n            Yup.object({\r\n              name: Yup.string()\r\n                .required('Required')\r\n                .max(50, 'Must be between 6 to 50 characters')\r\n                .min(6, 'Must be between 6 to 50 characters')\r\n                .test('checkUniqueName', 'This name is already exists.', async name => {\r\n                  // call api\r\n                  const isExists = await GroupApi.existsByName(name);\r\n                  return !isExists;\r\n                })\r\n            })\r\n          }\r\n          onSubmit={\r\n            async (values) => {\r\n              try {\r\n                // call api\r\n                await GroupApi.create(values.name);\r\n                setOpenModalCreate(false);\r\n                // show notification\r\n                showSuccessNotification(\r\n                  \"Create Group\",\r\n                  \"Create Group Successfully!\");\r\n                // reload group page\r\n                refreshForm();\r\n\r\n              } catch (error) {\r\n                console.log(error);\r\n                setOpenModalCreate(false);\r\n              }\r\n            }\r\n          }\r\n          validateOnChange={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              {/* header */}\r\n              <ModalHeader>\r\n                Create Group\r\n              </ModalHeader>\r\n\r\n              {/* body */}\r\n              <ModalBody className=\"m-3\">\r\n\r\n                {/* Name */}\r\n                <Row style={{ alignItems: \"center\" }}>\r\n                  <Col xs=\"auto\">\r\n                    Group Name:\r\n                    </Col>\r\n                  <Col>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter Group Name\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </ModalBody>\r\n\r\n              {/* footer */}\r\n              <ModalFooter>\r\n                {/* resend */}\r\n                <Button\r\n                  color=\"primary\"\r\n                  style={{ marginLeft: 10 }}\r\n                  disabled={isSubmitting}\r\n                  type=\"submit\"\r\n                >\r\n                  Save\r\n                </Button>\r\n\r\n                {/* close button */}\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => setOpenModalCreate(false)}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </ModalFooter>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n\r\n      {/* model update */}\r\n      <Modal\r\n        isOpen={isOpenModalUpdate}\r\n      >\r\n        <Formik\r\n          initialValues={\r\n            {\r\n              name: updateGroupInfo ? updateGroupInfo.name : '',\r\n              totalMember: updateGroupInfo ? updateGroupInfo.totalMember : ''\r\n            }\r\n          }\r\n          validationSchema={\r\n            Yup.object({\r\n              name: Yup.string()\r\n                .required('Required')\r\n                .max(50, 'Must be between 6 to 50 characters')\r\n                .min(6, 'Must be between 6 to 50 characters')\r\n                .test('checkUniqueName', 'This name is already exists.', async name => {\r\n                  if (name === updateGroupInfo.name) {\r\n                    return true;\r\n                  }\r\n\r\n                  // call api\r\n                  const isExists = await GroupApi.existsByName(name);\r\n                  return !isExists;\r\n                }),\r\n              totalMember: Yup.number()\r\n                .min(0, \"Must be a positive integer\")\r\n                .integer(\"Must be a positive integer\"),\r\n            })\r\n          }\r\n          onSubmit={\r\n            async (values) => {\r\n              try {\r\n                // call api\r\n                await GroupApi.update(updateGroupInfo.id, values.name, values.totalMember);\r\n                setOpenModalUpdate(false);\r\n                // show notification\r\n                showSuccessNotification(\r\n                  \"Update Group\",\r\n                  \"Update Group Successfully!\");\r\n                // reload group page\r\n                refreshForm();\r\n\r\n              } catch (error) {\r\n                console.log(error);\r\n                setOpenModalUpdate(false);\r\n              }\r\n            }\r\n          }\r\n          validateOnChange={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              {/* header */}\r\n              <ModalHeader>\r\n                Update Group\r\n              </ModalHeader>\r\n\r\n              {/* body */}\r\n              <ModalBody className=\"m-3\">\r\n\r\n                {/* Name */}\r\n                <Row style={{ alignItems: \"center\" }}>\r\n                  <Col xs=\"auto\">\r\n                    Group Name:\r\n                    </Col>\r\n                  <Col>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter Group Name\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n\r\n                {/* Total Member */}\r\n                <Row style={{ alignItems: \"center\" }}>\r\n                  <Col xs=\"auto\">\r\n                    Total Member:\r\n                    </Col>\r\n                  <Col>\r\n                    <FastField\r\n                      bsSize=\"lg\"\r\n                      type=\"number\"\r\n                      name=\"totalMember\"\r\n                      placeholder=\"Enter Total Member\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </ModalBody>\r\n\r\n              {/* footer */}\r\n              <ModalFooter>\r\n                {/* resend */}\r\n                <Button\r\n                  color=\"primary\"\r\n                  style={{ marginLeft: 10 }}\r\n                  disabled={isSubmitting}\r\n                  type=\"submit\"\r\n                >\r\n                  Save\r\n                </Button>\r\n\r\n                {/* close button */}\r\n                <Button\r\n                  color=\"primary\"\r\n                  onClick={() => setOpenModalUpdate(false)}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </ModalFooter>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal>\r\n\r\n    </Container >\r\n  )\r\n};\r\n\r\nconst mapGlobalStateToProps = state => {\r\n  return {\r\n    groups: selectListGroup(state),\r\n    page: selectPage(state),\r\n    size: selectSize(state),\r\n    totalElement: selectTotalElement(state),\r\n    sortField: selectSortField(state),\r\n    sortType: selectSortType(state),\r\n    selectedRows: selectSelectedRows(state)\r\n  };\r\n};\r\n\r\nexport default connect(mapGlobalStateToProps, { getListGroupAction, updateSelectedRowsAction })(Group);"]},"metadata":{},"sourceType":"module"}