{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\FinaExamReactJs\\\\Frontend\\\\Front_end_Final_Exam_ReactJS\\\\src\\\\pages\\\\docs\\\\Deployment.js\";\n\nimport React from \"react\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport Code from \"../../components/Code\";\n\nvar Intro = function Intro() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"introduction\",\n    className: \"mb-5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, \"Introduction\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, \"npm run build\"), \" creates a build directory with a production build of your app. Set up your favorite HTTP server so that a visitor to your site is served index.html, and requests to static paths like\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, \"/static/js/main.<hash>.js\"), \" are served with the contents of the \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 14\n    }\n  }, \"/static/js/main.<hash>.js\"), \" file.\"));\n};\n\nvar StaticServer = function StaticServer() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"static-server\",\n    className: \"mb-5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, \"Static Server\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, \"For environments using\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://nodejs.org/en/\",\n    target: \"_blank\",\n    rel: \"noreferrer noopener\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, \"Node\"), \", the easiest way to handle this would be to install\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/zeit/serve\",\n    target: \"_blank\",\n    rel: \"noreferrer noopener\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"serve\"), \" \", \"and let it handle the rest:\"), /*#__PURE__*/React.createElement(Code, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, \"npm install -g serve\\nserve -s build\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, \"The last command shown above will serve your static site on the port 5000. Like many of\", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/vercel/serve\",\n    target: \"_blank\",\n    rel: \"noreferrer noopener\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"serve\"), \"\\u2019s internal settings, the port can be adjusted using the \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 61\n    }\n  }, \"-l\"), \" or \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 80\n    }\n  }, \"--listen\"), \" flags:\"), /*#__PURE__*/React.createElement(Code, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, \"serve -s build -l 4000\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, \"Run this command to get a full list of the options available:\"), /*#__PURE__*/React.createElement(Code, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, \"serve -h\"));\n};\n\nvar OtherSolutions = function OtherSolutions() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"other-solutions\",\n    className: \"mb-5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, \"Other Solutions\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, \"You don\\u2019t necessarily need a static server in order to run a Create React App project in production. It also works well when integrated into an existing server side app.\"));\n};\n\nvar Express = function Express() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"express\",\n    className: \"mb-5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, \"Express\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, \"Express is a fast, unopinionated, minimalist web framework for Node.js. Here\\u2019s a programmatic example:\"), /*#__PURE__*/React.createElement(Code, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, \"const express = require('express');\\nconst path = require('path');\\nconst app = express();\\napp.use(express.static(path.join(__dirname, 'build')));\\napp.get('/', function(req, res) {\\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\\n});\\napp.listen(9000);\"));\n};\n\nvar Netlify = function Netlify() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"netlify\",\n    className: \"mb-5\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, \"Netlify\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, \"Deploy modern static websites with Netlify. Get CDN, Continuous deployment, 1-click HTTPS, and all the services you need.\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, \"To do a manual deploy to Netlify\\u2019s CDN:\"), /*#__PURE__*/React.createElement(Code, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, \"npm install netlify-cli -g\\nnetlify deploy\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, \"Choose \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 35\n    }\n  }, \"build\"), \" as the path to deploy.\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, \"To setup continuous delivery:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 36\n    }\n  }), \"With this setup Netlify will build and deploy when you push to git or open a pull request:\"), /*#__PURE__*/React.createElement(\"ol\", {\n    className: \"text-lg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://app.netlify.com/signup\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \"Start a new netlify project\")), /*#__PURE__*/React.createElement(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, \"Pick your Git hosting service and select your repository\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, \"Click \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, \"Build your site\"))));\n};\n\nvar Deployment = function Deployment() {\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    className: \"p-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 10,\n    xl: 8,\n    className: \"mx-auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"h3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, \"Deployment\"), /*#__PURE__*/React.createElement(\"hr\", {\n    className: \"my-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Intro, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(StaticServer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(OtherSolutions, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Express, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Netlify, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default Deployment;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/FinaExamReactJs/Frontend/Front_end_Final_Exam_ReactJS/src/pages/docs/Deployment.js"],"names":["React","Col","Container","Row","Code","Intro","StaticServer","OtherSolutions","Express","Netlify","Deployment"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Col,\r\n  Container,\r\n  Row\r\n} from \"reactstrap\";\r\n\r\nimport Code from \"../../components/Code\";\r\n\r\nconst Intro = () => (\r\n  <div id=\"introduction\" className=\"mb-5\">\r\n    <h3>Introduction</h3>\r\n    <p className=\"text-lg\">\r\n      <code>npm run build</code> creates a build directory with a production\r\n      build of your app. Set up your favorite HTTP server so that a visitor\r\n      to your site is served index.html, and requests to static paths like{\" \"}\r\n      <code>{`/static/js/main.<hash>.js`}</code> are served with the contents\r\n      of the <code>{`/static/js/main.<hash>.js`}</code> file.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst StaticServer = () => (\r\n  <div id=\"static-server\" className=\"mb-5\">\r\n    <h3>Static Server</h3>\r\n    <p className=\"text-lg\">\r\n      For environments using{\" \"}\r\n      <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noreferrer noopener\">Node</a>,\r\n      the easiest way to handle this would be to install{\" \"}\r\n      <a href=\"https://github.com/zeit/serve\" target=\"_blank\" rel=\"noreferrer noopener\">serve</a>{\" \"}\r\n      and let it handle the rest:\r\n    </p>\r\n    <Code>{`npm install -g serve\r\nserve -s build`}</Code>\r\n\r\n    <p className=\"text-lg\">\r\n      The last command shown above will serve your static site on the port 5000.\r\n      Like many of\r\n      <a href=\"https://github.com/vercel/serve\" target=\"_blank\" rel=\"noreferrer noopener\">serve</a>’s \r\n      internal settings, the port can be adjusted using the <code>-l</code> or <code>--listen</code> flags:\r\n    </p>\r\n    <Code>serve -s build -l 4000</Code>\r\n\r\n    <p className=\"text-lg\">\r\n      Run this command to get a full list of the options available:\r\n    </p>\r\n    <Code>serve -h</Code>\r\n  </div>\r\n);\r\n\r\nconst OtherSolutions = () => (\r\n  <div id=\"other-solutions\" className=\"mb-5\">\r\n    <h3>Other Solutions</h3>\r\n    <p className=\"text-lg\">\r\n      You don’t necessarily need a static server in order to run a \r\n      Create React App project in production. It also works well when \r\n      integrated into an existing server side app.\r\n    </p>\r\n  </div>\r\n);\r\n\r\nconst Express = () => (\r\n  <div id=\"express\" className=\"mb-5\">\r\n    <h4>Express</h4>\r\n    <p className=\"text-lg\">\r\n      Express is a fast, unopinionated, minimalist web framework for Node.js.\r\n      Here’s a programmatic example:\r\n    </p>\r\n    <Code>{`const express = require('express');\r\nconst path = require('path');\r\nconst app = express();\r\napp.use(express.static(path.join(__dirname, 'build')));\r\napp.get('/', function(req, res) {\r\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\r\n});\r\napp.listen(9000);`}</Code>\r\n  </div>\r\n);\r\n\r\nconst Netlify = () => (\r\n  <div id=\"netlify\" className=\"mb-5\">\r\n    <h4>Netlify</h4>\r\n    <p className=\"text-lg\">\r\n      Deploy modern static websites with Netlify. Get CDN, Continuous deployment, \r\n      1-click HTTPS, and all the services you need.\r\n    </p>\r\n    <p className=\"text-lg\">\r\n      To do a manual deploy to Netlify’s CDN:\r\n    </p>\r\n    <Code>{`npm install netlify-cli -g\r\nnetlify deploy`}</Code>\r\n\r\n    <p className=\"text-lg\">Choose <code>build</code> as the path to deploy.</p>\r\n    <p className=\"text-lg\">\r\n      To setup continuous delivery:<br />\r\n      With this setup Netlify will build and deploy when you push to git or open a pull request:\r\n    </p>\r\n    <ol className=\"text-lg\">\r\n      <li>\r\n        <a\r\n        href=\"https://app.netlify.com/signup\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\">\r\n          Start a new netlify project\r\n        </a>\r\n      </li>\r\n      <li>Pick your Git hosting service and select your repository</li>\r\n      <li>Click <code>Build your site</code></li>\r\n    </ol>\r\n  </div>\r\n);\r\n\r\nconst Deployment = () => (\r\n  <Container fluid className=\"p-0\">\r\n    <Row>\r\n      <Col lg={10} xl={8} className=\"mx-auto\">\r\n        <h1 className=\"h3\">Deployment</h1>\r\n        <hr className=\"my-4\" />\r\n        <Intro />\r\n        <StaticServer />\r\n        <OtherSolutions />\r\n        <Express />\r\n        <Netlify />\r\n      </Col>\r\n    </Row>\r\n  </Container>\r\n);\r\n\r\nexport default Deployment;\r\n"]},"metadata":{},"sourceType":"module"}