{"ast":null,"code":"import Api from './Api';\nvar url = \"/groups\";\n\nvar getAll = function getAll(page, size, sortField, sortType, search, minTotalMember, maxTotalMember) {\n  // default parameters\n  if (sortField === null || sortField === undefined || sortType === null || sortType === undefined) {\n    sortField = \"id\";\n    sortType = \"desc\";\n  }\n\n  var requestParams = {\n    page: page,\n    size: size,\n    sort: \"\".concat(sortField, \",\").concat(sortType),\n    search: search,\n    minTotalMember: minTotalMember,\n    maxTotalMember: maxTotalMember\n  };\n\n  if (minTotalMember) {\n    requestParams.minTotalMember = minTotalMember;\n  }\n\n  if (maxTotalMember) {\n    requestParams.maxTotalMember = maxTotalMember;\n  }\n\n  return Api.get(url, {\n    params: requestParams\n  });\n};\n\nvar existsByName = function existsByName(name) {\n  return Api.get(\"\".concat(url, \"/name/\").concat(name));\n};\n\nvar create = function create(name) {\n  var body = {\n    name: name\n  };\n  return Api.post(url, body);\n};\n\nvar getByID = function getByID(id) {\n  return Api.get(\"\".concat(url, \"/\").concat(id));\n};\n\nvar update = function update(id, name, totalMember) {\n  var body = {\n    name: name,\n    totalMember: totalMember\n  };\n  return Api.put(\"\".concat(url, \"/\").concat(id), body);\n};\n\nvar deleteByIds = function deleteByIds(ids) {\n  return Api.delete(\"\".concat(url, \"/\").concat(ids.toString()));\n}; // export\n\n\nvar api = {\n  getAll: getAll,\n  existsByName: existsByName,\n  create: create,\n  update: update,\n  getByID: getByID,\n  deleteByIds: deleteByIds\n};\nexport default api;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/FinaExamReactJs/Frontend/Front_end_Final_Exam_ReactJS/src/api/GroupApi.js"],"names":["Api","url","getAll","page","size","sortField","sortType","search","minTotalMember","maxTotalMember","undefined","requestParams","sort","get","params","existsByName","name","create","body","post","getByID","id","update","totalMember","put","deleteByIds","ids","delete","toString","api"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;AAEA,IAAMC,GAAG,GAAG,SAAZ;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAOC,IAAP,EAAaC,SAAb,EAAwBC,QAAxB,EAAkCC,MAAlC,EAA0CC,cAA1C,EAA0DC,cAA1D,EAA6E;AAExF;AACA,MAAIJ,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAKK,SAApC,IAAiDJ,QAAQ,KAAK,IAA9D,IAAsEA,QAAQ,KAAKI,SAAvF,EAAkG;AAC9FL,IAAAA,SAAS,GAAG,IAAZ;AACAC,IAAAA,QAAQ,GAAG,MAAX;AACH;;AAED,MAAMK,aAAa,GAAG;AAClBR,IAAAA,IAAI,EAAJA,IADkB;AAElBC,IAAAA,IAAI,EAAJA,IAFkB;AAGlBQ,IAAAA,IAAI,YAAKP,SAAL,cAAkBC,QAAlB,CAHc;AAIlBC,IAAAA,MAAM,EAANA,MAJkB;AAKlBC,IAAAA,cAAc,EAAdA,cALkB;AAMlBC,IAAAA,cAAc,EAAdA;AANkB,GAAtB;;AASA,MAAID,cAAJ,EAAoB;AAChBG,IAAAA,aAAa,CAACH,cAAd,GAA+BA,cAA/B;AACH;;AAED,MAAIC,cAAJ,EAAoB;AAChBE,IAAAA,aAAa,CAACF,cAAd,GAA+BA,cAA/B;AACH;;AAED,SAAOT,GAAG,CAACa,GAAJ,CAAQZ,GAAR,EAAa;AAAEa,IAAAA,MAAM,EAAEH;AAAV,GAAb,CAAP;AACH,CA1BD;;AA4BA,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAC3B,SAAOhB,GAAG,CAACa,GAAJ,WAAWZ,GAAX,mBAAuBe,IAAvB,EAAP;AACH,CAFD;;AAIA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACD,IAAD,EAAU;AACrB,MAAME,IAAI,GAAG;AACTF,IAAAA,IAAI,EAAJA;AADS,GAAb;AAIA,SAAOhB,GAAG,CAACmB,IAAJ,CAASlB,GAAT,EAAciB,IAAd,CAAP;AACH,CAND;;AAQA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,EAAD,EAAQ;AACpB,SAAOrB,GAAG,CAACa,GAAJ,WAAWZ,GAAX,cAAkBoB,EAAlB,EAAP;AACH,CAFD;;AAIA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACD,EAAD,EAAKL,IAAL,EAAWO,WAAX,EAA2B;AACtC,MAAML,IAAI,GAAG;AACTF,IAAAA,IAAI,EAAJA,IADS;AAETO,IAAAA,WAAW,EAAXA;AAFS,GAAb;AAIA,SAAOvB,GAAG,CAACwB,GAAJ,WAAWvB,GAAX,cAAkBoB,EAAlB,GAAwBH,IAAxB,CAAP;AACH,CAND;;AAQA,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAS;AACzB,SAAO1B,GAAG,CAAC2B,MAAJ,WAAc1B,GAAd,cAAqByB,GAAG,CAACE,QAAJ,EAArB,EAAP;AACH,CAFD,C,CAIA;;;AACA,IAAMC,GAAG,GAAG;AAAE3B,EAAAA,MAAM,EAANA,MAAF;AAAUa,EAAAA,YAAY,EAAZA,YAAV;AAAwBE,EAAAA,MAAM,EAANA,MAAxB;AAAgCK,EAAAA,MAAM,EAANA,MAAhC;AAAwCF,EAAAA,OAAO,EAAPA,OAAxC;AAAiDK,EAAAA,WAAW,EAAXA;AAAjD,CAAZ;AACA,eAAeI,GAAf","sourcesContent":["import Api from './Api';\r\n\r\nconst url = \"/groups\";\r\n\r\nconst getAll = (page, size, sortField, sortType, search, minTotalMember, maxTotalMember) => {\r\n\r\n    // default parameters\r\n    if (sortField === null || sortField === undefined || sortType === null || sortType === undefined) {\r\n        sortField = \"id\";\r\n        sortType = \"desc\";\r\n    }\r\n\r\n    const requestParams = {\r\n        page,\r\n        size,\r\n        sort: `${sortField},${sortType}`,\r\n        search,\r\n        minTotalMember,\r\n        maxTotalMember\r\n    }\r\n\r\n    if (minTotalMember) {\r\n        requestParams.minTotalMember = minTotalMember;\r\n    }\r\n\r\n    if (maxTotalMember) {\r\n        requestParams.maxTotalMember = maxTotalMember;\r\n    }\r\n\r\n    return Api.get(url, { params: requestParams });\r\n};\r\n\r\nconst existsByName = (name) => {\r\n    return Api.get(`${url}/name/${name}`);\r\n};\r\n\r\nconst create = (name) => {\r\n    const body = {\r\n        name\r\n    };\r\n\r\n    return Api.post(url, body);\r\n};\r\n\r\nconst getByID = (id) => {\r\n    return Api.get(`${url}/${id}`);\r\n};\r\n\r\nconst update = (id, name, totalMember) => {\r\n    const body = {\r\n        name,\r\n        totalMember\r\n    }\r\n    return Api.put(`${url}/${id}`, body);\r\n};\r\n\r\nconst deleteByIds = (ids) => {\r\n    return Api.delete(`${url}/${ids.toString()}`);\r\n};\r\n\r\n// export\r\nconst api = { getAll, existsByName, create, update, getByID, deleteByIds }\r\nexport default api;"]},"metadata":{},"sourceType":"module"}